knitr::opts_chunk$set(echo = TRUE)
setwd("/home/ihavehands/Desktop/stuff/berk/dlab/r-geospatial-workshop/")
path = "/home/ihavehands/Desktop/stuff/berk/dlab/r-geospatial-workshop/"
setwd(path)
knitr::opts_knit$set(root.dir = path)
read.csv('./d')
setwd(path)
# Read in from CSV file
sfhomes <- read.csv('data/sf_properties.csv',
stringsAsFactors = FALSE)
# Read in from CSV file
sfhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
path = "/home/ihavehands/Desktop/stuff/berk/dlab/r-geospatial-workshop/"
setwd(path)
knitr::opts_knit$set(root.dir = path)
list.files()
# Read in from CSV file
sfhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
list.files('data')
read.csv('./data/sf_properties.csv')
# Read in from CSV file
print(list.files())
sfhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
# Read in from CSV file
print(list.files())
sfhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
setwd("~/Desktop/stuff/berk/dlab/r-geospatial-workshop")
# Read in from CSV file
print(list.files())
sfhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(sp)     # spatial objects and methods
library(rgdal)  # read and write from file
library(rgeos)  # geometric operations
library(tmap)   # mapping spatial objects
library(raster) # reading in and operating on rasters
getwd()
path = "/home/ihavehands/Desktop/stuff/berk/dlab/r-geospatial-workshop"
setwd(path)
# Read in the 'sftracts_wpop' shapefile
tracts = readOGR('./data', 'sftracts_wpop')
tracts
# Read in from CSV file
print(list.files())
sfhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
# subset the data
sfhomes15 <- subset(sfhomes, as.numeric(SalesYear) == 2015)
sfhomes15_sp <- sfhomes15  # Make a copy
# Make it spatial
coordinates(sfhomes15_sp) <- c('lon','lat')
#Assign it a proj4string using the EPSG code
proj4string(sfhomes15_sp) <- CRS("+init=epsg:4326")
#Reproject to the tracts projection
#NOTE: We're overwriting the previous sfhomes15_sp object here! This is
#fine to do if we want, but we should always beware.
sfhomes15_sp = spTransform(sfhomes15_sp, CRS(proj4string(tracts)))
#check projection equality
proj4string(sfhomes15_sp) == proj4string(tracts)
sfboundary <- readOGR(dsn="data", layer="sf_boundary")
#transform it to match the tracts projection
sfboundary_lonlat = spTransform(sfboundary, CRS(proj4string(tracts)))
proj4string(sfboundary_lonlat) == proj4string(tracts)
# Reading in and plotting raster files
#read in a Bay Area DEM (Digital Elevation Model)
#(from http://www.webgis.com/terr_pages/CA/dem1/sanfrancisco.html)
DEM = raster('./data/san_francisco-e.DEM')
DEM
DEM
#plot it
plot(DEM)
plot(DEM_WGS_crop)
#plot it
plot(DEM)
tracts
proj4string(DEM)
proj4string(DEM) == proj4string(tracts)
#check out its projection
proj4string(DEM)
#reproject tracts and sfboundary to our DEM projection
tracts_NAD = spTransform(tracts, CRS(proj4string(DEM)))
sfboundary_NAD = spTransform(sfboundary_lonlat, CRS(proj4string(DEM)))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, CRS(proj4string(tracts))))
# Now let's check equivalence
proj4string(tracts_NAD) == proj4string(DEM)
proj4string(DEM_WGS) == proj4string(tracts)
?extent
# clip the WGS CRS version of the rasters to tracts
DEM_WGS_crop = crop(DEM_WGS, extent(tracts))
# Clip the NAD CRS version
DEM_crop = crop(DEM, extent(tracts_NAD))
plot(DEM_WGS_crop)
#plot together
plot(DEM_WGS_crop)
plot(tracts, add = T)
my_map <- tm_shape(DEM_WGS_crop) +
tm_raster() +
tm_shape(tracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("view")
my_map <- tm_shape(DEM_WGS_crop) +
tm_raster() +
tm_shape(tracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("plot")
my_map
my_map <- tm_shape(DEM_WGS_crop) +
tm_raster() +
tm_shape(tracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("view")
my_map
# get the elevation for every cell in each of the census tracts
elev = extract(DEM_WGS_crop, tracts)
#what did that give us?
head(elev)
length(elev)
nrow(tracts)
mean_elev = lapply(elev, mean, na.rm = T)
head(mean_elev)
tracts$mean_elev = unlist(mean_elev)
head(tracts)
#what did we get?
elev_map <- tm_shape(tracts) +
tm_polygons(col = 'mean_elev') +
tm_layout("The pain of biking in SF, by census tract",
inner.margins=c(0,0,.1,0), title.size=4.8)
elev_map
tmap_mode('plot')
tmm()
elev_map
elev = extract(DEM_WGS_crop, tracts, fun=mean)
#what did that give us?
head(elev)
#read in nlcd data
nlcd = raster('./data/nlcd2011_sf.tif')
#plot nlcd
plot(nlcd)
summary(nlcd)
barplot(nlcd)
proj4string(nlcd) == proj4string(tracts)
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, CRS(proj4string(tracts))))
proj4string(nlcd_WGS) == proj4string(tracts)
nlcd_WGS_crop = crop(nlcd_WGS, extent(tracts))
tm_shape(nlcd_WGS_crop) + tm_raster()
?reclassify
?reclassify
reclass_df <- c(0, 12, NA, # water will be set to NA (i.e. 'left out' of our analysis)
20, 30, 0, # developed and hardscape will have 0s
30, 32, NA,
40, Inf, 1) # greensapce will have 1s
reclass_df
reclass_m <- matrix(reclass_df, ncol = 3, byrow = TRUE)
reclass_m
nlcd_green <- reclassify(nlcd, reclass_m)
freq(nlcd_green)
freq(nlcd)
barplot(nlcd_green)
raster(reclass_m)
plot(raster(reclass_m))
#extract the mean nlcd_simple values to tract polygons
greenspace = c(extract(nlcd_green, tracts, fun=mean))
greenspace
?extract
#extract the mean nlcd_simple values to tract polygons,
#this time setting na.rm to TRUE
greenspace = extract(nlcd_green, tracts, fun=mean, na.rm = T)
#and add to our tracts dataframe (which we can do because order is preserved)
tracts$prop_greenspace = greenspace
#aggregate totvalue to tracts
tracts_w_mean_val = aggregate(x = sfhomes15_sp['totvalue'], by = tracts, FUN = mean)
tracts_w_mean_val
tracts$mean_totvalue = tracts_w_mean_val$totvalue
mod = lm(mean_totvalue ~ mean_elev + prop_greenspace, data = tracts)
summary(mod)
#First, we'll take a random subset of our 2015 homes, so that our analysis doesn't take so long to compute.
sfhomes15_sample = sfhomes15_sp[sample(seq(nrow(sfhomes15_sp)), replace = FALSE, size = 2000), ]
sfhomes15_sample
#reproject
sfhomes15_utm <- spTransform(sfhomes15_sample, CRS("+init=epsg:26910"))
DEM_utm = projectRaster(DEM, projectExtent(DEM, CRS(proj4string(sfhomes15_utm))))
nlcd_green_utm = projectRaster(nlcd_green, projectExtent(nlcd_green, CRS(proj4string(sfhomes15_utm))))
#check that the projections are all good
proj4string(sfhomes15_utm) == proj4string(DEM_utm)
proj4string(sfhomes15_utm) == proj4string(nlcd_green_utm)
#create buffer
sfhomes15_utm_buff = gBuffer(sfhomes15_utm, width = 100, byid = T)
#sum the greenspace within the buffers
#NOTE: This will take a couple minutes to run...
greenspace_homes = extract(nlcd_green_utm, sfhomes15_utm_buff, fun = sum, na.rm = T)
#add that as a column in our sfhomes15_utm dataframe
sfhomes15_utm$greenspace = greenspace_homes
#extract the elevation to the homes
#NOTE: no need for fun or na.rm arguments here, because the homes
#and points, not polygons, so only a single cell will extract to each
elev_homes = extract(DEM_utm, sfhomes15_utm)
#add that as a column in our sfhomes15_utm dataframe too
sfhomes15_utm$elev = elev_homes
mod = lm(totvalue ~ elev + greenspace, data = sfhomes15_utm)
summary(mod)
#(from http://climate.calcommons.org/dataset/monthly-summertime-fog)
#(units are in average hours per day)
karl_files = unique(gsub('.aux.xml', '', list.files('./data/CalMnYr')))
karl_files = karl_files[grep('flcc', karl_files)]
# Take  a look
karl_files
paste0('./data/CalMnYr/', karl_files)
paste0('./data/CalMnYr/', karl_files)
karl <- stack(paste0('./data/CalMnYr/', karl_files))
karl
#plot one
plot(karl[[7]])
plot(tracts, add = T)
plot(karl[1:3])
karl[1:3]
karl[[1:3]]
plot(karl[[1:3]])
#what's the projection?
proj4string(karl)
karl_WGS = projectRaster(karl, projectExtent(karl, CRS(proj4string(tracts))))
# check resultant CRS
proj4string(karl_WGS) == proj4string(tracts)
karl
karl_WGS
?raster::brick
# Crop it to tracts
karl_WGS_crop = crop(karl_WGS, extent(tracts))
#Note that R vectorized that operation across our entire RasterBrick, the same way that it vectorizes many operations, e.g. 3<4 vs 3< seq(4)
# now let's make our same plot again
par(mfrow = c(1,2))
plot(karl[[7]])
plot(tracts, add = T)
plot(karl_WGS_crop[[7]])
plot(tracts, add = T)
2+4
seq(2) + seq(2,4)
seq(3) + seq(2,4)
seq(3)
seq(3,5)
seq(3) + seq(3,5)
# Mean values
mean_karl_WGS_crop = mean(karl_WGS_crop)
mean_karl_WGS_crop
plot(mean_karl_WGS_crop)
plot(tracts, add = T)
# This won't work
sd_karl_WGS_crop = sd(karl_WGS_crop)
sd_karl_WGS_crop = calc(karl_WGS_crop, sd)
#plot that too
par(mfrow = c(1,2))
plot(mean_karl_WGS_crop)
plot(tracts, add = T)
plot(sd_karl_WGS_crop)
plot(tracts, add = T)
tracts$mean_karl = extract(mean_karl_WGS_crop, tracts, mean)
# Linear regression model
mod = lm(mean_karl ~ mean_elev, data = tracts)
summary(mod)
mean_karl_WGS_crop
tracts@data
tracts@polygons
tracts@bbox
tracts@proj4string
proj4string(tracts)
karl_WGS@data
karl_WGS@data@values
typeof(karl_WGS@data@values)
class(karl_WGS@data@values)
reclass_m
rasterreclass_m)
raster(reclass_m)
raster(reclass_m)@data
raster(reclass_m)@data@values
matrix(raster(reclass_m)@data@values, ncol = 3, byrow = T)
reclass_m
mean_karl_WGS_crop
mean_karl_WGS_crop@data@values
matrix(mean_karl_WGS_crop@data@values, ncol = ncol(mean_karl_WGS_crop), byrow = T)
matrix(mean_karl_WGS_crop@data@values, ncol = ncol(mean_karl_WGS_crop), byrow = T) -> a
a[2:4, 5:6]
a[2:4, 5:6] = 1
mean_karl_WGS_crop@data@values = a
plot(mean_karl_WGS_crop)
cat@n_letgs
nlcd@crs
nlcd@data
class(nlcd@data)
class(nlcd@data@values)
matrix(nlcd@data@values, ncol = ncol
# Linear regression model
mod = lm(mean_karl ~ mean_elev, data = tracts)
ncol(nlcd)
nlcd
matrix(nlcd@data@values, ncol = ncol(nlcd), byrow = T)
dim(matrix(nlcd@data@values, ncol = ncol(nlcd), byrow = T))
nlcd@data@values
nlcd@data
nlcd@data@attributes
nlcd@z
nlcd_green@data
nlcd_green@data@values
nlcd@data@values
plot(nlcd)
nlcd@data@fromdisk
mean_karl_WGS_crop@data@fromdisk
nlcd[[1,4]]
nlcd[1,4]
nlcd[1,4:6]
nlcd[1:1000,4:6]
nlcd[,]
x = raster(nlcd[,])
class(nlcd[,])
matrix(nlcd[,], ncol = ncol(nlcd), byrow = TRUE)
x = raster(matrix(nlcd[,], ncol = ncol(nlcd), byrow = TRUE))
x@data@values
CRS(x)
proj4string(x) = CRS(proj4string(nlcd))
x
x = raster(matrix(nlcd[,], ncol = ncol(nlcd), byrow = TRUE))
x
nlcd
tm_shape(tracts) + tm_polygons(col = 'prop_greenspace')
tracts$prop_greenspace
tm_shape(tracts) + tm_polygons(col = 'prop_greenspace')
tmap(view)
tmap_mode('view')
tm_shape(tracts) + tm_polygons(col = 'prop_greenspace')
tm_shape(tracts) + tm_polygons(fill = 'prop_greenspace')
