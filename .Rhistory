required.pkg <- c("maps", "ggplot2", "ggmap", "maptools", "rgdal", "sp", "dplyr", "tidyr", "scales", "RColorBrewer", "classInt")
pkgs.not.installed <- required.pkg[!sapply(required.pkg, function(p) require(p, character.only=T))]
if(length(pkgs.not.installed) > 0) {
install.packages(pkgs.not.installed, dependencies=TRUE)
} else {
print("All required packages installed.")
}
lapply(required.pkg, library, character.only = TRUE)
??sf
install.packages("sf")
vignette(package=sf)
library(sf)
vignette(package=sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
class(nc)
nc.plot()
plot(nc)
ggplot()+geom_polygon(nc)
geo_lut <-read.csv("/Users/pattyf/Documents/Dlab/projects/college_futures/lookups/ccc_geo_lut.csv", as.is = T)
View(geo_lut)
myc <- unique(geo_lut$county)
myc
for seq(myc) { print()}
for i in seq(myc) { print(i)}
?seq
for i in myc { print(i)}
for (i in myc) { print(i)}
for (i in myc) {
print(i)
print(paste0('ELSEIF [Drill_Down_County] == "',i,'" THEN IF [County] == "',i,'" THEN [CCC] ELSE "" END"'))
}
for (i in myc) {
print(paste0('ELSEIF [Drill_Down_County] == "',i,'" THEN IF [County] == "',i,'" THEN [CCC] ELSE "" END"'))
}
for (i in myc) {
print(paste0('ELSEIF [Drill_Down_County] == \"',i,'" THEN IF [County] == "',i,'" THEN [CCC] ELSE "" END"'))
}
for (i in myc) {
print(paste0("ELSEIF [Drill_Down_County] == '",i,'" THEN IF [County] == "',i,'" THEN [CCC] ELSE "" END"'))
}
print(paste0("ELSEIF [Drill_Down_County] == '",i,"' THEN IF [County] == '",i,"' THEN [CCC] ELSE "" END""))
}
for (i in myc) {
print(paste0("ELSEIF [Drill_Down_County] == '",i,"' THEN IF [County] == '",i,"' THEN [CCC] ELSE "" END""))
}
for (i in myc) {
print(paste0("ELSEIF [Drill_Down_County] == \"",i,"\" THEN IF [County] == \"",i,"\" THEN [CCC] ELSE \"\" END\""))
}
for (i in myc) {
print(paste0("ELSEIF [Drill_Down_County] == \\"",i,"\" THEN IF [County] == \"",i,"\" THEN [CCC] ELSE \"\" END\""))
}
for (i in myc) {
x<-"ELSEIF [Drill_Down_County] == \" + i + "\" THEN IF [County] == \"" +i + "\" THEN [CCC] ELSE \"\" END")
print(x)
}
for (i in myc) {
x <- "ELSEIF [Drill_Down_County] == \"" + i + "\" THEN IF [County] == \"" + i + "\" THEN [CCC] ELSE \"\" END")
print(x)
}
x <- "ELSEIF [Drill_Down_County] == \"" + i + "\" THEN IF [County] == \"" + i + "\" THEN [CCC] ELSE \"\" END")
x <- "ELSEIF [Drill_Down_County] == \""
y <- "\" THEN IF [County] == \""
z <- "\" THEN [CCC] ELSE \"\" END")
print(paste0(x,i,y,i,z))
x <- "ELSEIF [Drill_Down_County] == \""
y <- "\" THEN IF [County] == \""
z <- "\" THEN [CCC] ELSE \"\" END"
print(paste0(x,i,y,i,z))
x <- 'ELSEIF [Drill_Down_County] == "'
y <- ' THEN IF [County] == "'
z <- ' THEN [CCC] ELSE "" END'
print(paste0(x,i,y,i,z))
x <- 'ELSEIF [Drill_Down_County] == \"'
y <- ' THEN IF [County] == "'
z <- ' THEN [CCC] ELSE "" END'
print(paste0(x,i,y,i,z))
x <- "ELSEIF [Drill_Down_County] == '"
y <- ' THEN IF [County] == "'
z <- ' THEN [CCC] ELSE "" END'
print(paste0(x,i,y,i,z))
for (i in myc) {
print(paste0(x,i,y,i,z))
}
x <- "ELSEIF [Drill_Down_County] == '"
y <- ' THEN IF [County] == "'
z <- ' THEN [CCC] ELSE "" END'
for (i in myc) {
print(paste0(x,i,y,i,z))
}
x <- "ELSEIF [Drill_Down_County] == '"
y <- " THEN IF [County] == '"
z <- " THEN [CCC] ELSE '' END"
for (i in myc) {
print(paste0(x,i,y,i,z))
}
x <- "ELSEIF [Drill_Down_County] == '"
y <- "' THEN IF [County] == '"
z <- "' THEN [CCC] ELSE '' END"
for (i in myc) {
print(paste0(x,i,y,i,z))
}
doh <-""
for (i in myc) {
doh = doh + paste0(x,i,y,i,z)
}
doh
doh <-""
for (i in myc) {
doh = paste0(doh + paste0(x,i,y,i,z))
}
doh
doh <-""
for (i in myc) {
doh = paste0(doh,paste0(x,i,y,i,z))
}
doh
doh <-""
for (i in myc) {
doh = paste0(doh,paste0(x,i,y,i,z,"\n"))
}
doh
doh <-""
for (i in myc) {
doh = paste0(doh,paste0(x,i,y,i,z,"\\n"))
}
doh
cat(doh)
for (i in myc) {
cat(paste0(x,i,y,i,z,"\\n"))
}
for (i in myc) {
cat(paste0(x,i,y,i,z))
}
myc
for (i in myc) {
cat(paste0(x,i,y,i,z))
}
for (i in myc) {
cat(paste0(x,i,y,i,z))
cat()
}
for (i in myc) {
cat(paste0(x,i,y,i,z))
cat("\n")
}
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(c("backports", "boot", "checkmate", "covr", "curl", "digest", "dotCall64", "foreach", "gapminder", "geosphere", "git2r", "htmlTable", "iterators", "lazyeval", "magick", "MASS", "Matrix", "mgcv", "multcomp", "openssl", "purrr", "quantreg", "reshape2", "rex", "rlang", "rmarkdown", "rprojroot", "sf", "spacetime", "spam", "spatstat", "spatstat.utils", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "withr", "xts", "yaml"))
install.packages('roxygen2')
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
library(devtools)
library(devtools)
has_devel()
reload('devtools')
reload("devtools")
library(deltools)
library(devtools)
?devtools
has_devel()
??has_devel()
library(devtools)
has_devel()
library(devtools)
has_devel()
library(devtools)
has_devel()
devtools::build_github_devtools()
install.packages("devtools")
library(devtools)
has_devel()
library(sp)
library(rgdal)
library(rgeos)
library(tmap)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
setwd("~/Documents/Dlab/workshops/2018/r-geospatial-workshop")
sfhomes <- read.csv('data/sf_properties_25ksample.csv')
sfhomes15 <- subset(sfhomes, as.numeric(SalesYear) == 2015)
class(sfhomes15)
sfhomes15_sp <- sfhomes15
coordinates(sfhomes15_sp) <- c('lon','lat') # ORDER MATTERS!!
proj4string(sfhomes15_sp) <- CRS("+init=epsg:4326")
plot(sfhomes15_sp)
sfboundary <- readOGR(dsn="data",layer="sf_boundary")
sfboundary_lonlat <- spTransform(sfboundary, CRS("+init=epsg:4326"))
us_states_5070 <- spTransform(us_states, CRS("+init=epsg:5070"))
tm_shape(us_states_5070) + tm_polygons(col="beige") +
tm_shape(us_states) + tm_borders(col="purple")
us_states <- readOGR("./data", "us_states_pop")
us_states_5070 <- spTransform(us_states, CRS("+init=epsg:5070"))
tm_shape(us_states_5070) + tm_polygons(col="beige") +
tm_shape(us_states) + tm_borders(col="purple")
tm_shape(sfboundary_lonlat) + tm_polygons(col="white", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="totvalue", palette="BuPu", size=.15) +
tm_layout(inner.margins=c(.05,.05, .15, .15))
tm_shape(sfboundary_lonlat) + tm_polygons(col="grey", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col=c("totvalue","totvalue2"), size=0.15, style=c("pretty","jenks") )
library(RColorBrewer)
sfhomes15_sp$totvalue2 <- sfhomes15_sp$totvalue
tm_shape(sfboundary_lonlat) + tm_polygons(col="grey", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col=c("totvalue","totvalue2"), size=0.15, style=c("pretty","jenks") )
tm_shape(us_states_5070) + tm_polygons(col=c("POPULATION", "popdens"), style=c("jenks", "jenks"))
knitr::opts_chunk$set(echo = TRUE)
tmap_mode("view")
tm_shape(us_states_5070) + tm_polygons(col="white", border.alpha = 0.5) +
tm_shape(us_states_5070) + tm_symbols(col="popdens", style="jenks") +
tm_layout(legend.position=c("left","bottom"))
tmap_mode("view")
tm_shape(us_states_5070) + tm_polygons(col="white", border.alpha = 0.5) +
tm_shape(us_states_5070) + tm_symbols(col="popdens", style="jenks",
popup.vars=c("NAME","POPULATION","popdens")) +
tm_layout(legend.position=c("left","bottom"))
map1 <- tm_shape(uspop_5070) + tm_polygons(col="POPULATION", style="jenks")
map1 <- tm_shape(us_states_5070) + tm_polygons(col="POPULATION", style="jenks")
map1
map1 <- tm_shape(us_states_5070) + tm_polygons(col="POPULATION", style="jenks")
map1
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(rgdal)
library(rgeos)
library(tmap)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
# setwd()
sfhomes <- read.csv('data/sf_properties_25ksample.csv')
sfhomes15 <- subset(sfhomes, as.numeric(SalesYear) == 2015)
class(sfhomes15)
sfhomes15_sp <- sfhomes15
coordinates(sfhomes15_sp) <- c('lon','lat') # ORDER MATTERS!!
proj4string(sfhomes15_sp) <- CRS("+init=epsg:4326")
sfboundary <- readOGR(dsn="data",layer="sf_boundary")
sfboundary_lonlat <- spTransform(sfboundary, CRS("+init=epsg:4326"))
us_states <- readOGR("./data", "us_states_pop")
qtm(us_states)
tm_shape(us_states) + tm_polygons(col="grey", border.col = "white")
tm_shape(us_states) + tm_polygons(col="grey", border.col = "white")
tm_shape(us_states, projection="+init=epsg:5070") + tm_polygons(col="grey", border.col = "white")
tm_shape(us_states, projection="+init=epsg:5070") + tm_polygons(col="grey", border.col = "white") +
tm_shape(us_states) + tm_borders(col="purple")
us_states_5070 <- spTransform(us_states, CRS("+init=epsg:5070"))
tm_shape(us_states_5070) + tm_polygons(col="beige") +
tm_shape(us_states) + tm_borders(col="purple")
tm_shape(sfboundary_lonlat) + tm_polygons(col="white", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="black", size=.15)
tm_shape(sfboundary_lonlat) + tm_polygons(col="white", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="Neighborhood", size=.15, legend.show = F)
library(RColorBrewer)
display.brewer.all(type="qual")
display.brewer.all(type="seq")
display.brewer.all(type="div")
tm_shape(sfboundary_lonlat) + tm_polygons(col="white", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="totvalue", palette="BuPu", size=.15) +
tm_layout(inner.margins=c(.05,.05, .15, .15))
tm_shape(sfboundary_lonlat) + tm_polygons(col="white", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="totvalue", palette="YlGnBu", size=.15)
tm_shape(sfboundary_lonlat) + tm_polygons(col="white", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="Neighborhood", size=.15, legend.show = T, palette="BuPu")
tm_shape(sfboundary_lonlat) + tm_polygons(col="white", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="totvalue", palette="Set1", size=.15)
tm_shape(sfboundary_lonlat) + tm_polygons(col="grey", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="totvalue", style="quantile", size=0.15)
tm_shape(sfboundary_lonlat) + tm_polygons(col="grey", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="totvalue", size=0.15, style="fisher")
sfhomes15_sp$totvalue2 <- sfhomes15_sp$totvalue
tm_shape(sfboundary_lonlat) + tm_polygons(col="grey", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col=c("totvalue","totvalue2"), size=0.15, style=c("quantile","equal") )
sfhomes15_sp$totvalue2 <- sfhomes15_sp$totvalue
tm_shape(sfboundary_lonlat) + tm_polygons(col="grey", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col=c("totvalue","totvalue2"), size=0.15, style=c("equal","cont") )
tm_shape(us_states_5070) + tm_polygons(col="POPULATION")
tm_shape(us_states_5070) + tm_polygons(col="POPULATION") +  tm_layout(legend.position=c("left","bottom"))
tm_shape(us_states_5070) + tm_polygons(col="POPULATION", style="jenks")
tm_shape(us_states_5070) +
tm_polygons(col=c("POPULATION","popdens"), style="jenks", palette="BuPu" ) +
tm_layout(legend.position=c("left","bottom"))
tm_shape(us_states_5070) + tm_polygons(col="white", border.alpha = 0.5) +
tm_shape(us_states_5070) + tm_symbols(col="popdens", style="jenks") +
tm_layout(legend.position=c("left","bottom"))
tm_shape(us_states_5070) + tm_polygons(col="white", border.alpha = 0.5) +
tm_shape(us_states_5070) + tm_symbols(size="POPULATION", style="jenks", col="purple") +
tm_layout(legend.position=c("left","bottom"))
tmap_mode("view")
tm_shape(us_states_5070) + tm_polygons(col="white", border.alpha = 0.5) +
tm_shape(us_states_5070) + tm_symbols(col="popdens", style="jenks") +
tm_layout(legend.position=c("left","bottom"))
tmap_mode('plot')
tm_shape(sfboundary_lonlat) + tm_polygons(col="white", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col="totvalue", palette="BuPu", size=.15) +
tm_layout(inner.margins=c(.05,.05, .15, .15))
library(RColorBrewer)
sfhomes15_sp$totvalue2 <- sfhomes15_sp$totvalue
tm_shape(sfboundary_lonlat) + tm_polygons(col="grey", border.col="black") +
tm_shape(sfhomes15_sp) + tm_dots(col=c("totvalue","totvalue2"), size=0.15, style=c("pretty","jenks") )
sftract <- readOGR("data", "sf_pop_by_tracts")
sftracts<- readOGR("data", "sf_pop_by_tracts")
plot(sftracts)
head(sftracts)
sftracts<- subset(sftracts, pop14 > 0)
plot(sftracts)
points(sfhomes15_sp)
homes_with_tracts <- over(sfhomes15_sp, sftracts)
# What is the CRS of the property data?
proj4string(sfhomes15_sp)
# What is the CRS of the census tracts?
proj4string(sftracts)
bbox(sfhomes15_sp)
bbox(sftracts)
sftracts <- spTransform(sftracts, CRS(proj4string(sfhomes15_sp)))
# What is the CRS of the property data?
proj4string(sfhomes15_sp)
# What is the CRS of the census tracts?
proj4string(sftracts)
homes_with_tracts <- over(sfhomes15_sp, sftracts)
head(homes_with_tracts)
nrow(homes_with_tracts)
nrow(sftracts)
nrow(sfhomes15_sp)
head(sfhomes15_sp@data)
homes_with_tracts <- homes_with_tracts[c("GEOID")]
nrow(homes_with_tracts)
head(homes_with_tracts)
sfhomes15_sp@data <-cbind(sfhomes15_sp@data, homes_with_tracts)
head(sfhomes15_sp@data)
mean_totvalue_by_tract <- aggregate(totvalue ~ GEOID, sfhomes15_sp, mean)
head(mean_totvalue_by_tract)
colnames(mean_totvalue_by_tract) <- c("GEOID","mean_totvalue")
head(mean_totvalue_by_tract)
sftracts2<- merge(sftracts2, mean_totvalue_by_tract,
by.x="GEOID", by.y="GEOID")
sftracts<- merge(sftracts2, mean_totvalue_by_tract,
by.x="GEOID", by.y="GEOID")
sftracts<- merge(sftracts, mean_totvalue_by_tract,
by.x="GEOID", by.y="GEOID")
View(sftracts)
tracts_with_property_count <- aggregate(x = sfhomes15_sp["totvalue"],
by = sftracts2, FUN = mean)
tracts_with_property_count <- aggregate(x = sfhomes15_sp["totvalue"],
by = sftracts, FUN = mean)
class(tracts_with_property_count)
View(tracts_with_property_count)
tracts_with_property_count$GEOID <- sftracts$GEOID
View(tracts_with_property_count)
library(ggmap)
library(ggplot2)
coit_tower <- geocode('Coit Tower, San Francisco, CA')
coit_tower
class(coit_tower)
coordinates(coit_tower) <- c("lon","lat")
proj4string(coit_tower)<- CRS("+init=epsg:4326")
coit_tower_utm <- spTransform(coit_tower, CRS("+init=epsg:26910"))
library(rgeos)
coit_km_buffer <- gBuffer(coit_tower_utm, width=1000)
plot(coit_km_buffer)
tm_shape(sfhomes15_sp) + tm_dots(col="blue") +
tm_shape(coit_km_buffer) + tm_borders(col="red", lwd=2) +
tm_shape(coit_tower_utm) + tm_dots(col="red")
tmap_mode("interactive")
tmap_mode("view")
tm_shape(sfhomes15_sp) + tm_dots(col="blue") +
tm_shape(coit_km_buffer) + tm_borders(col="red", lwd=2) +
tm_shape(coit_tower_utm) + tm_dots(col="red")
buff_mean <- aggregate(x = sfhomes15_sp["totvalue"],
by = coit_km_buffer, FUN = mean)
coit_buffer_lonlat <- spTransform(coit_km_buffer,
CRS(proj4string(sfhomes15_sp)))
buff_mean <- aggregate(x = sfhomes15_sp["totvalue"],
by = coit_buffer_lonlat, FUN = mean)
buff_mean
